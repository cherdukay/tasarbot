import os
import sys
from rich.console import Console
from rich.prompt import Prompt, Confirm
from rich.panel import Panel
from rich import print as rprint
from database import DatabaseManager
from models import Project, AnalysisType
from analyzer import ProjectAnalyzer
from dotenv import load_dotenv
load_dotenv()

class TasarBot:
    def __init__(self):
        self.console = Console()
        self.analyzer = ProjectAnalyzer()
        self.current_project = None
        self.db = DatabaseManager()

    def display_menu(self):
        self.console.clear()
        rprint(Panel.fit("ðŸ¤– [bold blue]TasarBot[/bold blue] - Proje Analiz AsistanÄ±"))
        menu_items = [
            "[1] Yeni Proje OluÅŸtur",
            "[2] Proje YÃ¼kle",
            "[3] Analiz Yap",
            "[4] Mevcut Projeyi GÃ¶rÃ¼ntÃ¼le",
            "[5] Projeyi Kaydet",
            "[6] Ã‡Ä±kÄ±ÅŸ"
        ]
        for item in menu_items:
            rprint(item)

    def create_project(self):
        self.console.clear()
        rprint(Panel.fit("[bold green]Yeni Proje OluÅŸtur[/bold green]"))
        
        name = Prompt.ask("Proje AdÄ±")
        description = Prompt.ask("Proje AÃ§Ä±klamasÄ±")
        
        self.current_project = Project(name=name, description=description, created_at="")
        rprint("[green]âœ“ Proje baÅŸarÄ±yla oluÅŸturuldu![/green]")

    def perform_analysis(self):
        if not self.current_project:
            rprint("[red]YÃ¼klÃ¼ proje yok. LÃ¼tfen Ã¶nce bir proje oluÅŸturun veya yÃ¼kleyin.[/red]")
            return

        analysis_options = {
            "1": AnalysisType.RISK,
            "2": AnalysisType.RESOURCE,
            "3": AnalysisType.SWOT,
            "4": AnalysisType.TIMELINE,
            "5": AnalysisType.ROADMAP
        }

        self.console.clear()
        rprint(Panel.fit("[bold yellow]Analiz TÃ¼rÃ¼nÃ¼ SeÃ§in[/bold yellow]"))
        for key, value in analysis_options.items():
            rprint(f"[{key}] {value.value.title()} Analizi")

        choice = Prompt.ask("Analiz tÃ¼rÃ¼nÃ¼ seÃ§in", choices=list(analysis_options.keys()))
        
        with self.console.status("[bold green]Analiz oluÅŸturuluyor..."):
            analysis = self.analyzer.analyze(self.current_project, analysis_options[choice])
            self.current_project.analyses[analysis_options[choice].value] = analysis

        self.console.clear()
        rprint(Panel(analysis, title=f"{analysis_options[choice].value.title()} Analizi"))
        input("\nDevam etmek iÃ§in Enter'a basÄ±n...")

    def view_project(self):
        if not self.current_project:
            rprint("[red]YÃ¼klÃ¼ proje yok.[/red]")
            return

        self.console.clear()
        rprint(Panel.fit(f"""
        [bold blue]Proje DetaylarÄ±[/bold blue]
        AdÄ±: {self.current_project.name}
        AÃ§Ä±klama: {self.current_project.description}
        OluÅŸturulma Tarihi: {self.current_project.created_at}
        
        [bold green]Mevcut Analizler:[/bold green]
        {', '.join(self.current_project.analyses.keys()) if self.current_project.analyses else 'Yok'}
        """))
        input("\nDevam etmek iÃ§in Enter'a basÄ±n...")

    def save_project(self):
        if not self.current_project:
            rprint("[red]Kaydedilecek proje yok.[/red]")
            return

        project_id = self.db.save_project(self.current_project)
        rprint(f"[green]âœ“ Proje ID ile kaydedildi: {project_id}[/green]")

    def load_project(self):
        projects = self.db.list_projects()
        if not projects:
            rprint("[red]KayÄ±tlÄ± proje bulunamadÄ±.[/red]")
            return

        rprint(Panel.fit("[bold yellow]Mevcut Projeler[/bold yellow]"))
        for pid, name in projects:
            rprint(f"[{pid}] {name}")

        project_id = Prompt.ask("YÃ¼klenecek proje ID'sini girin", 
                            choices=[str(p[0]) for p in projects])
        
        data = self.db.load_project(project_id=int(project_id))
        if data:
            self.current_project = Project.from_dict(data)
            rprint("[green]âœ“ Proje baÅŸarÄ±yla yÃ¼klendi![/green]")
        else:
            rprint("[red]Hata: Proje bulunamadÄ±.[/red]")

    def run(self):
        while True:
            self.display_menu()
            choice = Prompt.ask("Bir seÃ§enek seÃ§in", choices=["1", "2", "3", "4", "5", "6"])
            
            actions = {
                "1": self.create_project,
                "2": self.load_project,
                "3": self.perform_analysis,
                "4": self.view_project,
                "5": self.save_project,
                "6": sys.exit
            }
            
            if choice == "6":
                if Confirm.ask("Ã‡Ä±kmak istediÄŸinizden emin misiniz?"):
                    rprint("[yellow]HoÅŸÃ§akalÄ±n! ðŸ‘‹[/yellow]")
                    break
            else:
                actions[choice]()

if __name__ == "__main__":
    bot = TasarBot()
    bot.run()